#!/bin/bash
#
# the "_meta"-folder:
#   files are of the form:
#       $filename
#       $permisions
#       $owner
#       $group
#       $md5

# Written by Maximilian-Huber.de
#
# Last modified: Mon Apr 13, 2015  01:12

###############################################################################
# variables
USER="$(whoami)"
UGROUP="$(id -g -n $USER)"
HOST="$(hostname)"
CONFIGFolder="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################################
# functions
updateFile(){
  tmp=$(mktemp -p /tmp/)
  file="$1" && echo ${file/$USER/USER} > $tmp

  if [[ -f "$file" ]]; then
  #   base="${file##*/}"

    dir="${file%/*}/"
    dir=${dir/$HOME/}
    dir="/${dir#/.}"
    base=${file##*/}
    base=${base#.}

    targetfile="$CONFIGFolder/$dir/$base"
    metafile="$CONFIGFolder/_meta/$dir/$base"

    [[ -f $metafile ]] && oldMd5="$(tail -n 1 $metafile)" || oldMd5=""
    newMd5=`md5sum $file | awk '{ print $1 }'`

    if [ ! "$oldMd5" == "$newMd5" ] ; then
      echo "update: $file"
      fuser=$(stat --format='%U' $file)
      fgroup=$(stat --format='%G' $file)
      cat >> $tmp <<META
$(stat --format=%a $file )
${fuser/$USER/USER}
${fgroup/$UGROUP/UGROUP}
$newMd5
META

      mkdir -p "$CONFIGFolder/$dir" && mkdir -p "$CONFIGFolder/_meta/$dir"
      cp $file "$targetfile" && cp $tmp $metafile
      if [ -d "$CONFIGFolder/.git" ]; then
        git add $targetfile
        git add "$metafile"
      fi
    fi
  else
    if [[ -d "$file" ]]; then
      echo "is dir: $file"
    else
      echo "not found: $file"
    fi
  fi
  rm $tmp
}

asimilate(){
  parseMetaFile(){
    myRecGenDir(){
      if [[ ! -f $1 ]]; then
        dir="${1%/*}"
        if [[ ! -d $dir ]]; then
          while [[ ! -d $dir && -n $dir ]]; do
            dir="${dir%/*}"
          done
          if [[ -d $dir && ! -d $ldir ]]; then
            install -d \
              --mode=$(stat --format=%a $dir) \
              --owner=$(stat --format='%U' $dir) \
              --group=$(stat --format='%G' $dir) \
              "${1%/*}"
          fi
        fi
      fi
    }

    LINES=()
    while IFS= read -r line; do
      LINES[${#LINES[@]}]="$line"
    done < "$1"

    read -r -p "install: ${1/\/_meta/}? [y/N] " response
    response=${response,,}
    if [[ $response =~ ^(yes|y)$ ]]; then
      myRecGenDir ${LINES[0]/USER/$USER}
      install -D \
        --mode=${LINES[1]} \
        --owner=${LINES[2]/USER/$USER} \
        --group=${LINES[3]/UGROUP/$UGROUP} \
        ${1/\/_meta/} \
        ${LINES[0]/USER/$USER}
    fi

  }

  for f in $CONFIGFolder/_meta/*; do
    [[ -f $f ]] && parseMetaFile $f
  done
  for f in $CONFIGFolder/_meta/**/*; do
    [[ -f $f ]] && parseMetaFile $f
  done
}

gitRoutine(){
  pushIfConnected(){
    # check, if connected #####################################################
    if ! ping -c1 cloud.github.com > /dev/null 2>&1; then
      echo "**** not connected (ping) ****"
      # check again ###########################################################
      if ! wget -O - cloud.github.com > /dev/null 2>&1; then
        echo "**** not connected (wget) ****"
        popd
        exit 1
      fi
    fi
    git push
  }

  if [ -d "$CONFIGFolder/.git" ]; then
    pushd "$CONFIGFolder"
    git commit -a # -m "automatisch aktualisiert"
    pushIfConnected
    popd
  fi
}

###############################################################################
# run

if [[ $# == 0 ]]; then
  cat "$CONFIGFolder/_files" | while IFS= read -r LINE; do
    [[ ! $LINE == \#* ]] && {
      for FILE in ${LINE/\~/$HOME}; do
        # echo $FILE
        updateFile $FILE
      done
    }
  done
  gitRoutine
else
  case $1 in
    -a|--asimilate)
      asimilate
      ;;
    *)
      echo "unknown parameter $1"
      ;;
  esac
fi

exit 0
# vim: set foldmethod=marker foldlevel=0 foldmarker={{{,}}}:
