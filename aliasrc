# written by maximilian-huber.de
# ~/.aliasrc

alias vi="vim"
alias vime="vim -u ~/.vimencrypt -x "
alias gvime="gvim -u ~/.vimencrypt -x "
alias tvim="tmux new vim"
alias svim="sudo vim -u /home/hubi/.vimrc "

alias tmx="tmux attach-session || tmux"

# makes "sudo vi" to "sudo vim"
alias sudo="sudo "

have() { type "$1" &> /dev/null; }

#--------------------------------------------------------------------
#   file specific
#-------------------------------------------------------------------{{{

alias rm='rm -I'
alias cp='cp -vi'

alias mv='mv -vi'
# mkmv - creates a new directory and moves the file into it, in 1 step
# Usage: mkmv <file> <directory>
mkmv() {
  mkdir "$2"
  mv "$1" "$2"
}

alias ls='ls --color=auto'
alias ll='ls -alF'
alias lll='ls -alF | less'
alias la='ls -CFA'
alias l='ls -CF'
alias l.='ls -dF .[a-zA-Z0-9]*' #only show dotfiles
lgrep() { ls -alF | egrep "$@"; }

#keep track of folders
#alias cd="pushd"
#alias bd="popd"

cd() { #Automatically do an ls after each cd
  if [ -n "$1" ]; then
    builtin cd "$@" && ls
  else
    builtin cd ~ && ls
  fi
}

alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
#alias ~="cd ~/"

mkcd() { #make dir and enter it
  mkdir -p "$1"
  cd "$1"
}

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

alias pkill9="pkill --signal 9"

# disk usage for humans
duh() { test $# -eq 0 && set -- *; du -sch "$@" | sort -h; }

alias ducks='du -cs * |sort -rn |head -11'
alias ducksall='du -cs * |sort -rn'
alias ducksALL='du -c --max-depth=1 ./ |sort -rn'
alias hducks='du -cs .??* |sort -rn |head -11'
alias hducksall='du -cs .??* |sort -rn'

have ranger && {
  ranger-cd() {
    tempfile='/tmp/chosendir'
    /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
      cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
  }
  if [ -n "$BASH_VERSION" ]; then
    have ranger && bind '"\C-o":" ranger-cd\C-m"'
  elif [ -n "$ZSH_VERSION" ]; then
    bindkey -s '^o' '^qranger-cd\n'
  fi
}

#Fix permissions
permfix() {
  for dir in "$@"; do
    find "$dir" -type d -exec chmod 755 {} \;
    find "$dir" -type f -exec chmod 644 {} \;
  done
}

# Find a file with a pattern in name:
ff() { find . -type f -iname '*'$*'*' -ls ; }

# Find a file with pattern $1 in name and Execute $2 on it:
fe() { find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }

# Extract files from any archive
# Usage: ex <archive_name>
ex() {
  if [ -f $1 ] ; then
    opt=$( tr '[:upper:]' '[:lower:]' <<<"$1" )
    case $opt in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) unrar e $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

alias countFilesByTypes="find . -type f -exec basename \"{}\" \\; | sed -e 's/.*\\.//gi' | sort  | uniq  -c | sort  -rn"

# Quick and dirty version control for one file or one folder
myversioncontrol() {
  if [ $# -ne 0 ]; then
    if [ -f $FILE ]; then
      suf="_versions"
      fn=$1
      mkdir -p "$fn$suf"
      touch "$fn$suf/log"
      nr=`ls "$fn$suf" | wc -l`
      nr=`printf "%02d" $(($nr))`
      if [ -d "$fn" ]; then
        echo "${fn} -> $fn$suf/v${nr}_${fn%%/}.tar.gz"
        tar cvzf "$fn$suf/v${nr}_${fn%%/}.tar.gz"  "${fn%%/}/" > /dev/null
      else
        \cp -v "$fn" "$fn$suf/v${nr}_$fn"
      fi
      echo "${nr}: $(date)" >> "$fn$suf/log"
      while [ $# -ne 1 ]; do
        echo "    $2" >> "$fn$suf/log"
        shift
      done
      echo
      echo "size: $(du -hs "$fn$suf")"
    fi
  fi
}

bac() { # backup with copy
  for file; do
    cp -Rpv "$file" "$file~$(date -Ins)~"
  done
}

buc() { # undo backup copy
  for file; do
    dest=${file%%\~*}
    test -d "$dest" && mv -v "$dest" "$file.orig"
    mv -v "$file" "$dest"
  done
}

#-------------------------------------------------------------------}}}
#   system control
#-------------------------------------------------------------------{{{

alias reboot="systemctl reboot"
alias poweroff="systemctl poweroff"
alias halt="systemctl poweroff"
alias suspend="systemctl suspend"

# for hotswaping SATA or eSATA drives
# scan for new sata devices (as root):
mysatascan() { su -c "echo \"0 0 0\" >/sys/class/scsi_host/host1/scan"; }
# remove sata devices:
#       hdparm -Y /dev/sdX

myusbsusendoff() {
  su -c "for i in /sys/bus/usb/devices/*/power/control; do echo on > \$i; done"
}

# will show a list of all the currently loaded modules and all of their parameters
# should be run as root
my_mod_parameters () {
  N=/dev/null;
  C=`tput op` O=$(echo -en "\n`tput setaf 2`>>> `tput op`");
  for mod in $(cat /proc/modules|cut -d" " -f1);
  do
    md=/sys/module/$mod/parameters;
    [[ ! -d $md ]] && continue;
    m=$mod;
    d=`modinfo -d $m 2>$N | tr "\n" "\t"`;
    echo -en "$O$m$C";
    [[ ${#d} -gt 0 ]] && echo -n " - $d";
    echo;
    for mc in $(cd $md; echo *);
    do
      de=`modinfo -p $mod 2>$N | grep ^$mc 2>$N|sed "s/^$mc=//" 2>$N`;
      echo -en "\t$mc=`cat $md/$mc 2>$N`";
      [[ ${#de} -gt 1 ]] && echo -en " - $de";
      echo;
    done;
  done
}

# will show a list of the current power settings
my_power_settings() {
  sudo bash -c '
  for i in `find /sys/devices -name "bMaxPower"`;
  do
    for ii in `find $i -type f`;
    do
      bd=`dirname $ii`;
      busnum=`cat $bd/busnum`;
      devnum=`cat $bd/devnum`;
      title=`lsusb -s $busnum:$devnum`;
      echo -e "\n\n+++ $title\n  -$bd\n  -$ii";
      for ff in `find $bd/power -type f ! -empty 2>/dev/null`;
      do
        v=`cat $ff 2>/dev/null|tr -d "\n"`;
        [[ ${#v} -gt 0 ]] && echo -e " `basename $ff`=$v";
        v=;
      done | sort -g;
    done;
  done;
  echo -e "\n\n\n+++ Kernel Modules\n";
  for m in `command lspci -k|sed -n "/in use:/s,^.*: ,,p"|sort -u`;
  do
    echo "+ $m";
    systool -v -m $m 2> /dev/null | sed -n "/Parameters:/,/^$/p";
  done
  ';
}

#-------------------------------------------------------------------}}}
#   multimedia
#-------------------------------------------------------------------{{{

alias myStopScreensaver="xset dpms 9997 9998 9999"

alias mplayerampl="mplayer -af volume=10.1:0"
mdump() { mplayer -dumpstream "${1}" -dumpfile ${2}.mp4; }
alias mdir="mplayer -shuffle {*,**/*}{wma,mp3,acc,ogg}"

# download from youtube
alias ccl="cclive -s best"

starWars() { telnet towel.blinkenlights.nl; }

#rename all images
#alias myrenameAllImages="jhead -autorot -nf%y%m%d-%f **/*.jpg"
alias myrenameImg="jhead -autorot -nf%y%m%d-%f"

#-------------------------------------------------------------------}}}
#   documente / printing
#-------------------------------------------------------------------{{{

mystartcups() {
  [[  ! -f /tmp/myCupsStartet ]] && {
    echo "starting CUPS"
    sudo systemctl start avahi-daemon.service
    sudo systemctl start cups.service
    touch /tmp/myCupsStartet
  }
}
# druckt A5 Brosch√ºren
lprBook() {
  mystartcups
  [[ -f $1 ]] && {
    pdftops -paperw 420 -paperh 595 $1 - \
      | psbook -q \
      | ps2pdf14 - - \
      | lpr -o sides=two-sided-short-edge -o number-up=2 -o fit-to-page -o media=A4
  } || { echo "file not found"; }
}
alias myLprBook=lprBook
alias lprFit="lpr -o fit-to-page -o media=A4 "
alias lprFitL="lpr -o landscape -o fit-to-page -o media=A4 "

alias myPyfCrop="pdfcrop --margins \"20 30 20 40\""

# Extract range of Pages From a PDF
# from: http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
function myPdfpextr()
{
    # this function uses 3 arguments:
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

mylatexmk(){
  grep -l '\\documentclass' *tex | \
    xargs latexmk -pdf -outdir=".latexmk_files" -pvc
}

whilezathura(){
  if [  $# -eq 1 ]; then
    while true; do zathura -l error $1; sleep 1; done
  else
    while true; do zathura -l error *.pdf; sleep 1; done
  fi
}

#-------------------------------------------------------------------}}}
#   Mathe
#-------------------------------------------------------------------{{{

alias mymatlab="/usr/local/MATLAB/R2013a/bin/matlab -desktop -nosplash"
alias mymatlab-headless="/usr/local/MATLAB/R2013a/bin/matlab -nojvm -nodisplay -nosplash < "

#-------------------------------------------------------------------}}}
#   package management
#-------------------------------------------------------------------{{{

# remove orphan pacman packages
myRemOrphans() {
  if [[ ! -n $(pacman -Qdt) ]]; then
    echo no orphans to remove
  else
    sudo pacman -Rs $(pacman -Qdtq)
  fi
}

# Pacman alias examples
alias pacupg='sudo pacman -Syu ; echo ; myRemOrphans'        # Synchronize with repositories before upgrading packages that are out of date on the local system.
alias pacin='sudo pacman -S'           # Install specific package(s) from the repositories
alias pacins='sudo pacman -U'          # Install specific package not from the repositories but from a file
alias pacre='sudo pacman -R'           # Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pacrem='sudo pacman -Rns'        # Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacrep='pacman -Si'              # Display information about a given package in the repositories
alias pacreps='pacman -Ss'             # Search for package(s) in the repositories
alias pacloc='pacman -Qi'              # Display information about a given package in the local database
alias paclocs='pacman -Qs'             # Search for package(s) in the local database

# Additional pacman alias examples
alias pacupd='sudo pacman -Sy && sudo abs'     # Update and refresh the local package and ABS databases against repositories
alias pacinsd='sudo pacman -S --asdeps'        # Install given package(s) as dependencies of another package
alias pacmir='sudo pacman -Syy'                # Force refresh of all package lists after updating /etc/pacman.d/mirrorlist

#update via yaourt
have yaourt && alias yaourtupd="yaourt -Syu --aur"

#-------------------------------------------------------------------}}}
#   some networking
#-------------------------------------------------------------------{{{

alias ping6alle="ping6 ff02::1%eth0"
alias ping6allw="ping6 ff02::1%wlan0"
# or: mtr
alias myarp-scan-e="sudo arp-scan --interface=enp0s25 --localnet"
alias myarp-scan-w="sudo arp-scan --interface=wlp3s0 --localnet"
alias mynmap="nmap -sP 192.168.178.0/24"

# Get IP (call with myip)
myip() { myip=`elinks -dump http://checkip.dyndns.org:8245/`; echo "${myip}"; }

## shortcut  for iptables and pass it via sudo#
#alias ipt='sudo /sbin/iptables'
## display all rules #
#alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
#alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
#alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
#alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
#alias firewall=iptlist

myiscsi() {
  myiscsiRoutine() {
    sudo systemctl start open-iscsi.service
    #sudo iscsiadm -m discovery -t sendtargets -p $2
    sudo iscsiadm -m node -L all
    sudo mkdir -p /mnt/iscsi/
    sudo mount /dev/disk/by-uuid/${1} /mnt/iscsi/
  }
  UUID=1971b7be-593f-4950-ae93-4904b007c18e
  IP=192.168.178.56
  myiscsiRoutine $UUID $IP
}

#-------------------------------------------------------------------}}}
#   misc
#-------------------------------------------------------------------{{{

e() {
  if [ $# -eq 1 ]; then
    if [ -f $1 ] ; then
      case $( tr '[:upper:]' '[:lower:]' <<<"$1" ) in
        *.pdf|*.djvu|*.ps) zathura $1 ;;
        *.jpg|*.png) geeqie $1 ;;
        *.zip) file-roller $1 ;;
        *) vim $1 ;;
      esac
    else
      vim $1
    fi
  else
    vim
  fi
}

alias dmesgwatch='watch "dmesg |tail -15"'
alias mydmesg='watch "dmesg |tail -15"' #the same

alias incognito="/usr/bin/chromium --incognito"

alias clamscan="sudo clamscan --recursive --infected --bell"
alias clamclean="sudo clamscan --recursive --infected --bell --remove"
alias clamupd="sudo freshclam"

# calc - simple calculator
# usage: calc <equation>
calc() { echo "$*" | bc -l; }

hgrep() { history 0 | egrep "$@"; }

#genpasswd() {
  #local l=$1
  #[ "$l" == "" ] && l=16
  #tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
#}

startphp() { php -S 127.0.0.1:8080; }

have tmux && {
  run_under_tmux() {
    # Run $1 under session or attach if such session already exist.
    # $2 is optional path, if no specified, will use $1 from $PATH.
    # If you need to pass extra variables, use $2 for it as in example below..
    # Example usage:
    #  torrent() { run_under_tmux 'rtorrent' '/usr/local/rtorrent-git/bin/rtorrent'; }
    #  mutt() { run_under_tmux 'mutt'; }
    #  irc() { run_under_tmux 'irssi' "TERM='screen' command irssi"; }

    # There is a bug in linux's libevent...
    # export EVENT_NOEPOLL=1

    command -v tmux >/dev/null 2>&1 || return 1

    if [ -z "$1" ]; then return 1; fi
    local name="$1"
    if [ -n "$2" ]; then
      local file_path="$2"
    else
      local file_path="command ${name}"
    fi

    if tmux has-session -t "${name}" 2>/dev/null; then
      tmux attach -d -t "${name}"
    else
      tmux new-session -s "${name}" "${file_path}" \; set-option status \; set set-titles-string "${name} (tmux@${HOST})"
    fi
  }
  have mutt && mutt() { run_under_tmux 'mutt'; }
  have finch && finch() { run_under_tmux 'finch'; }
  have ekg2 && ekg2() { run_under_tmux 'ekg2'; }
}

myXnest() {
  Xnest :1 &
  export DISPLAY=localhost:1
}

#-------------------------------------------------------------------}}}
#   some functions
#-------------------------------------------------------------------{{{

mycompTime() { #compare the speed of two ($1, $2) commands (loop $3 times)
  if [ $# -ne 3 ]; then return 1; fi
  type $1 >/dev/null 2>&1 || return 2
  type $2 >/dev/null 2>&1 || return 3
  printf 1
  time for ((i=0; i<${3:-10}; i++)) ; do $1 ; done >/dev/null 2>&1
  printf 2
  time for ((i=0; i<${3:-10}; i++)) ; do $2 ; done >/dev/null 2>&1
}

# Repeat n times command
# example: myRepeat 10 ls
myRepeat() {
  local i max
  max=$1; shift;
  for ((i=1; i <= max ; i++)); do
    eval "$@";
  done
}

mkscript() {
  # usage:
  # mkscript [sh/py] filename
  if [ $# -eq 2 ]; then
    if [ ! -f $2 ]; then
      case $1 in
        sh)
          echo "#!/bin/bash" > "$2"
          ;;
        py)
          echo "#!/usr/bin/env python" > "$2"
          ;;
      esac

      if [ -f $2 ]; then
        chmod 700 "$2"
        vim -c "set ft=$1" "$2"
      fi
    fi
  fi
}

# remind me, its important!
# usage: remindme <time> <text>
# e.g.: remindme 10m "omg, the pizza"
myremind() {
  if [  $# -eq 0 ]; then
    echo
    echo "usage: remindme <time> <text>"
    echo "e.g.: remindme 10m \"omg, the pizza\""
    echo
  else
    time=$(date +%H:%M)
    if [  $# -eq 1 ]; then
      sleep $1 && zenity --info --text "${time} to $(date +%H:%M):   \n\n$1" &
    else
      if [  $# -eq 2 ]; then
        sleep $1 && zenity --info --text "${time} to $(date +%H:%M) ($1):   \n\n$2" &
      fi
    fi
  fi
}

#myclock() {
  #keypress=''
  #echo
  #while [ "x$keypress" = "x" ];do
    #printf "   " ; date; printf "\33[A";
    ##sleep 1;
    #read -t 1 -r -n1 keypress
  #done
#}
myclock(){
  while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &
}

#}}}

if [ -n "$BASH_VERSION" ]; then
  alias reload='source ~/.bashrc'
elif [ -n "$ZSH_VERSION" ]; then
  alias reload='source /etc/zsh/zshrc'
fi
# vim: set filetype=sh foldmethod=marker foldmarker={{{,}}}:
